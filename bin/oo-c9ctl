#!/bin/bash -eu

C9=/usr/bin/oo-cloud9
if [ ! -f $C9 ]; then
  # Resonable guess
  C9=`cd $(dirname $0) && pwd`/oo-cloud9
fi

function usage() {
  echo "usage: $(basename $0) [-c|--config CONFIG] {start|stop|status|restart}" 1>&2
}

# Parse arguments
eval set -- "$(getopt -n "$0" -o "hvc:l:p:w:n:dP" -l "help,verbose,config:,debug:,packed:,ip:,port:,projectdir:,projectname:,logdir:,rundir:,username:,password:" "--" "$@")"
if [ "$?" -ne 0 ]; then usage; exit 1; fi

debug=
packed=
ip=
port=
projectdir=
projectname=
logdir=
rundir=
username=
password=

while true; do
  case "$1" in
    -h|--help) usage; shift;;
    -v|--verbose) verbose=1; shift;;
    -c|--config) shift;CONFIG="${1}"; shift;;
    -d|--debug) debug=1; shift;;
    -P|--packed) packed=1; shift;;
    -l|--ip) shift; ip="${1}"; shift;;
    -p|--port) shift; port="${1}"; shift;;
    -w|--projectdir) shift; projectdir="${1}"; shift;;
    -n|--projectname) shift; projectname="${1}"; shift;;
    --logdir) shift; logdir="${1}"; shift;;
    --rundir) shift; rundir="${1}"; shift;;
    --username) shift; username="${1}"; shift;;
    --password) shift; password="${1}"; shift;;
    --) shift; break;;
  esac
done

# Check which command to execute
if [ "$#" -ne 1 ]; then
  usage
  exit 2
fi

source $CONFIG
[ -n "$ip" ] && IP=$ip
[ -n "$port" ] && PORT=$port
[ -n "$projectdir" ] && PROJECTDIR=$projectdir
[ -n "$projectname" ] && PROJECTNAME=$projectname
[ -n "$logdir" ] && LOGDIR=$logdir
[ -n "$rundir" ] && RUNDIR=$rundir
[ -n "$username" ] && USERNAME=$username
[ -n "$password" ] && PASSWORD=$password
DEBUG=${debug:-0}
PACKED=${packed:-0}

LOGFILE=$LOGDIR/oo-cloud9.log
PIDFILE=$RUNDIR/oo-cloud9.pid

function isrunning() {
  if [ -f $PIDFILE ]; then
    local pid=$(cat $PIDFILE 2> /dev/null)
    uid=$(id -u)
    if `ps --pid $pid 2>&1 | grep oo-cloud9 >/dev/null 2>&1`  ||  `pgrep -x oo-cloud9 -u $uid >/dev/null 2>&1`; then
      return 0
    fi
  fi
  return 1
}

# Kill the process given by $1 and its children
function killtree() {
  local _pid="$1"
  for _child in $(ps -o pid --no-headers --ppid ${_pid}); do
    killtree ${_child}
  done

  local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
  if [ -z "$should_be_gone_pid" ]; then
    return
  else
    kill -TERM ${_pid}
  fi

  local count=0
  while [ ${count} -lt 15 ]; do
    local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
    if [ -z "$should_be_gone_pid" ]; then
      return
    else
      sleep 2
      let count=${count}+1
    fi
  done

  local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
  if [ ! -z $should_be_gone_pid ]; then
    kill -9 ${_pid}
  fi
}

function start() {
  echo "Starting Cloud9"
  if isrunning; then
    echo "Already Started Cloud9"
    return 
  fi
  mkdir -p $LOGDIR
  mkdir -p $RUNDIR

  CMDOPTS=""
  [ $DEBUG == 1 ] && CMDOPTS="$CMDOPTS -d"
  [ $PACKED == 1 ] && CMDOPTS="$CMDOPTS -P"
  CMDOPTS="$CMDOPTS -l $IP -p $PORT -w $PROJECTDIR --rundir $RUNDIR"
  [ -n "$PROJECTNAME" ] && CMDOPTS="$CMDOPTS --projectname $PROJECTNAME"
  [ -n "$USER" ] && [ -n "$PASSWORD" ] && CMDOPTS="$CMDOPTS --username $USER --password $PASSWORD" 
  EXECCMD="$C9 $CMDOPTS"
echo  $EXECCMD 
  $EXECCMD >> $LOGFILE 2>&1 &
  local ret=$?
  local pid=$!
  if [ $ret -eq 0 ]; then
    echo $pid > $PIDFILE
    echo "Started Cloud9"
    return 
  else
    echo "Cloud9 failed to start - $ret" 1>&2
    return
  fi
}

function stop() {
  echo "Stopping Cloud9"

  if isrunning; then
    if [ -f "$PIDFILE" ]; then
      local pid=$(cat $PIDFILE);
      killtree "$pid"
      rm -rf "$PIDFILE"
      echo "Stopped Cloud9"
    else
      echo "Failed to locate Cloud9 PID File" 1>&2
    fi
  else
    echo "Already stopped Cloud9"  
  fi
}

function restart() {
  stop
  start
}

function status() {
  if isrunning; then
    echo "Cloud9 is running"
    return 0
  else
    echo "Cloud9 is not running"
    return 1
  fi
}

case "$1" in
  start)     start ;;
  stop)      stop ;;
  restart)   restart ;;
  status)    status ;;
  isrunning)   isrunning ;;
  *)         usage
esac
